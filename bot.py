import json
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
CLEAN_TYPE, NAME, PHONE, ADDRESS, DATE_TIME, COMMENT, ASK_QUESTION = range(7)


# ADMIN_GROUP_ID = 1756108441

import os

TOKEN = os.getenv("8047716790:AAF3Orl4sM7lMe6IMxHbybYcsh4aSpRhIRA")
ADMIN_GROUP_ID = int(os.getenv("ADMIN_GROUP_ID"))

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
ANIMATION_PATH = "animation.gif"

# –ó–∞–≥—Ä—É–∑–∫–∞ FAQ
with open("faq.json", encoding="utf-8") as f:
    FAQ = json.load(f)

# === –•–µ–Ω–¥–ª–µ—Ä /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(ANIMATION_PATH, "rb") as gif:
            await update.message.reply_animation(gif)
    except:
        pass

    keyboard = [
        ["üßº –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞", "üßπ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞"],
        ["‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]
    ]
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CLEAN_TYPE

# === –®–∞–≥–∏ —Ñ–æ—Ä–º—ã ===
async def clean_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["type"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return NAME

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]], resize_keyboard=True)
    )
    return ADDRESS

async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        context.user_data["address"] = f"https://maps.google.com/?q={lat},{lon}"
    else:
        context.user_data["address"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏:")
    return DATE_TIME

async def datetime_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["datetime"] = update.message.text
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    return COMMENT

async def comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["comment"] = update.message.text

    data = context.user_data
    text = (
        "üßæ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É–±–æ—Ä–∫—É:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {data['datetime']}\n"
        f"üßΩ –¢–∏–ø: {data['type']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"
    )

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=text)
    return ConversationHandler.END

# === –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ===
async def faq_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    faq_text = "\n\n".join([f"‚ùì {q}\nüí° {a}" for q, a in FAQ.items()])
    await update.message.reply_text(f"üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n{faq_text}")
    return CLEAN_TYPE

# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å ===
async def ask_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:")
    return ASK_QUESTION

async def question_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    context.user_data["question_user"] = user.id
    context.user_data["question_msg_id"] = update.message.message_id

    text = (
        f"üì® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n"
        f"{update.message.text}"
    )
    await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=text)
    await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω! ‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    return CLEAN_TYPE

# === –ö–æ–º–∞–Ω–¥–∞ /cancel ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = ApplicationBuilder().token("8047716790:AAF3Orl4sM7lMe6IMxHbybYcsh4aSpRhIRA").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CLEAN_TYPE: [
                MessageHandler(filters.Regex("^(üßº|üßπ)"), clean_type_handler),
                MessageHandler(filters.Regex("‚ùì"), faq_handler),
                MessageHandler(filters.Regex("üí¨"), ask_question_handler),
            ],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
            ADDRESS: [
                MessageHandler(filters.LOCATION, address_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, address_handler)
            ],
            DATE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, datetime_handler)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment_handler)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
