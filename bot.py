import json
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler, ContextTypes

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
CLEAN_TYPE, NAME, PHONE, ADDRESS, DATE_TIME, COMMENT, ASK_QUESTION, HOUSE_TYPE = range(8)
pending_questions = {}


# –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏–º ID –≤–∞—à–µ–π Telegram-–≥—Ä—É–ø–ø—ã
ADMIN_GROUP_ID = 1756108441  # –ø—Ä–∏–º–µ—Ä
import os
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "1756108441"))

# chat_id=1756108441,
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)

ASKING_QUESTION = 1
VIDEO_PATH = "/home/sdhoijfidnhindhijtn/video2.mp4"



user_questions = {}

ANIMATION_PATH = "animation.gif"
from database import Session, User
import logging
logging.basicConfig(level=logging.INFO)

with open("faq.json", encoding="utf-8") as f:
    FAQ = json.load(f)

# === –•–µ–Ω–¥–ª–µ—Ä /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user
    session = Session()

    user_type = update.message.text
    context.user_data["house_type"] = user_type

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    existing = session.query(User).filter_by(telegram_id=tg_user.id).first()
    if not existing:
        user = User(
            telegram_id=tg_user.id,
            username=tg_user.username,
            full_name=tg_user.full_name
        )
        session.add(user)
        session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nüë§ {tg_user.full_name}\nüÜî @{tg_user.username or '–ë–µ–∑ username'}"
    )

    await update.message.reply_text(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —É–±–æ—Ä–∫—É!"
    )

    welcome_text = (
        "Xush kelibsz?\n"
        "TashClean!\n"
        "ü•≥ Tabriklaymiz!!! Sizga üéÅ 50% chegirma taqdim etildi.\n"
        "üìë Promokodingiz: Cleaing10012 nusxalab botga yuboring.\n"
        "/start qayta ishga tushuring.\n"
    )
    keyboard = [
        [InlineKeyboardButton("üé• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", callback_data="show_video")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –≤–∏–¥–µ–æ:", reply_markup=reply_markup)
    try:
        with open(ANIMATION_PATH, "rb") as gif:
            await update.message.reply_animation(gif)
    except:
        pass

    keyboard = [
        ["üßº –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞", "üßπ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞"],
        ["‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]
    ]
    await update.message.reply_text(welcome_text)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
    )
    await update.message.reply_text(
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.\n–ö–∞–∫–æ–π –≤–∞–º —É–±–æ—Ä–∫–∞?"
    )
    return CLEAN_TYPE

# === –®–∞–≥–∏ —Ñ–æ—Ä–º—ã ===
async def clean_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["type"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return NAME

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "show_video":
        with open(VIDEO_PATH, 'rb') as video:
            await context.bot.send_video(
                chat_id=query.message.chat.id,
                video=video,
                caption="üìΩ –≠—Ç–æ –Ω–∞—à–∞ —Ä–∞–±–æ—Ç–∞ ‚Äî –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
            )

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]], resize_keyboard=True)
    )
    return ADDRESS

async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        context.user_data["address"] = f"https://maps.google.com/?q={lat},{lon}"
    else:
        context.user_data["address"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–±–æ—Ä–∫–∏:")
    return DATE_TIME

async def datetime_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["datetime"] = update.message.text
    await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    return COMMENT

async def comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["comment"] = update.message.text

    data = context.user_data
    text = (
        "üßæ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É–±–æ—Ä–∫—É:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {data['address']}\n"
        f"üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {data['datetime']}\n"
        f"üßΩ –¢–∏–ø: {data['type']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"
        f"–¢–∏–ø –∂–∏–ª—å—è: {context.user_data.get('house_type')}"
    )

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=text)
    return ConversationHandler.END

# === –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ===
async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    question = update.message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    sent = await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üí¨ –í–æ–ø—Ä–æ—Å –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{question}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º: message_id -> user_id
    user_questions[sent.message_id] = user.id

    await update.message.reply_text("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    return ConversationHandler.END

async def forward_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        original_message_id = update.message.reply_to_message.message_id
        reply_text = update.message.text

        user_id = user_questions.get(original_message_id)

        if user_id:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{reply_text}"
                )
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å ===
async def ask_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    question = update.message.text

    user_questions[user_id] = question  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å

    # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞
    text = f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{update.effective_user.username or '–±–µ–∑ username'} (ID: {user_id}):\n\n{question}\n\n" \
           f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å: /reply {user_id} –≤–∞—à_–æ—Ç–≤–µ—Ç"

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.")

async def reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <user_id> <–≤–∞—à –æ—Ç–≤–µ—Ç>")
        return

    try:
        user_id = int(context.args[0])
        answer = " ".join(context.args[1:])
        await context.bot.send_message(chat_id=user_id, text=f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{answer}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        original_message = update.message.reply_to_message.text
        try:
            user_id = int(original_message.split("ID: ")[-1])
        except Exception:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
            return

        response_text = update.message.text.replace("/reply", "").strip()
        if not response_text:
            await update.message.reply_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ /reply.")
            return

        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{response_text}",
                parse_mode=ParseMode.HTML
            )
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reply –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º.")

async def question_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    context.user_data["question_user"] = user.id
    context.user_data["question_msg_id"] = update.message.message_id

    text = (
        f"üì® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n"
        f"{update.message.text}"
    )
    await context.bot.send_message(chat_id=ADMIN_GROUP_ID, text=text)
    await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω! ‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    return CLEAN_TYPE

# === –ö–æ–º–∞–Ω–¥–∞ /cancel ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def ask_question_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    return ASKING_QUESTION


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")


async def faq_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üßΩ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "‚ùì –ö–∞–∫–∏–µ –≤–∏–¥—ã —É–±–æ—Ä–∫–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?\n"
        "‚Äî –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞.\n\n"
        "‚ùì –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —É–±–æ—Ä–∫–∞?\n"
        "‚Äî –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–æ—â–∞–¥–∏ –∏ —Ç–∏–ø–∞ —É–±–æ—Ä–∫–∏. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.\n\n"
        "‚ùì –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º?\n"
        "‚Äî –î–∞, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å 09:00 –¥–æ 20:00."
    )
    await update.message.reply_text(text)

# async def question_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.effective_user.id
#     question = update.message.text
#     username = update.effective_user.username or "–ë–µ–∑ username"

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º
#     user_questions[user_id] = question

#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
#     admin_text = (
#         f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n\n"
#         f"{question}\n\n"
#         f"–û—Ç–≤–µ—Ç–∏—Ç—å: /reply {user_id} –≤–∞—à_–æ—Ç–≤–µ—Ç"
#     )

#     await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text)
#     await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–∫–æ—Ä–æ –º—ã –æ—Ç–≤–µ—Ç–∏–º.")
#     return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===


async def house_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_type = update.message.text
    context.user_data["house_type"] = user_type

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. ‚úÖ"
    )

HOUSE_TYPE = 10



def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token("8047716790:AAF3Orl4sM7lMe6IMxHbybYcsh4aSpRhIRA").build()

    ask_conv = ConversationHandler(
        entry_points=[CommandHandler("ask", ask_question_start),
                      MessageHandler(filters.Regex("‚ùì"), ask_question_start)],
        states={
            ASKING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    handlers = [
    CommandHandler("start", start),
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text),
    ]

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CLEAN_TYPE: [
                MessageHandler(filters.Regex("^(üßº|üßπ)"), clean_type_handler),
                MessageHandler(filters.Regex("‚ùì"), faq_handler),
                MessageHandler(filters.Regex("üí¨"), ask_question_handler),
            ],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
            HOUSE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, house_type_handler)],
            ADDRESS: [
                MessageHandler(filters.LOCATION, address_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, address_handler)
            ],
            DATE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, datetime_handler)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment_handler)],
            ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, question_received)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(ask_conv)
    app.add_handler(MessageHandler(filters.REPLY & filters.Chat(chat_id=ADMIN_CHAT_ID), forward_admin_reply))
    app.add_handler(CommandHandler("reply", reply_command))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())